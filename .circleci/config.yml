version: 2
jobs:
  build:
    docker:
      - image: circleci/openjdk:8-jdk
    working_directory: ~/repo
    environment:
      # Customize the JVM maximum heap limit
      JVM_OPTS: -Xmx3200m
      TERM: dumb
    steps:
      - checkout
      # Download and cache dependencies
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "build.gradle" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: gradle dependencies
      - save_cache:
          paths:
            - ~/.gradle
          key: v1-dependencies-{{ checksum "build.gradle" }}
      
      # build and tests!
      - run: gradle clean build
      
      - run:
          name: Save test results
          command: |
            mkdir -p ~/junit/
            find . -type f -regex ".*/build/test-results/.*xml" -exec cp {} ~/junit/ \;
            cp -r build/reports/tests/test/ ~/junit
          when: always
      - store_test_results:
          path: ~/junit
      - store_artifacts:
          path: ~/junit
      
      - run: 
          name: save jar
          command: |
            mkdir -p ~/result
            mv build/libs/springBoot-0.0.1-SNAPSHOT.jar ~/result/springBoot.jar
      - store_artifacts:
          path: ~/result
  
  docker_build:
    docker:
      - image: docker:18.06.1-ce
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: build image
          command: |
            docker --version
            cd ~/repo
            docker build -t "springboot" .
      - run:
          name: upload image to docker hub
          command: |
            docker tag tomcat-mvn-jdk8 motestu23912/gradle-cicd
            docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD
            docker push motestu23912/gradle-cicd
          
  hold:
    docker:
      - image: docker:18.06.1-ce
    working_directory: ~/repo
    steps:
      - checkout
      - run:
          name: hold
          command: |
            echo "hold hold hold"
  
  dev_deploy:
    docker:
      - image: docker:18.06.1-ce
    working_directory: ~/repo
    steps:
      - checkout
      - setup_remote_docker:
          docker_layer_caching: true
      - run:
          name: deploy docker on dev site
          command: |
            export DOCKER_CERT_PATH=~/repo/certs
            export DOCKER_TLS_VERIFY=1
            export DOCKER_HOST=tcp://$DNS_NAME:2376
            docker login -u $DOCKERHUB_USER -p $DOCKERHUB_PASSWORD
            docker rm -f $(docker ps -a -q)
            docker rmi -f $(docker images -a -q)
            docker pull motestu23912/gradle-cicd
            docker run -tid -p 8086:8086 --restart=always --name springBootDemo motestu23912/gradle-cicd
            rm -rf ~/repo/certs
  
workflows:
  version: 2
  # 只有master的commit都會觸發。local_build
  local_build:
    jobs:
      - build:
          filters:
            branches:
              only: master
      - docker_build:
          requires:
            - build
          filters:
            branches:
              only: master
  
  # 只有在develop上的commit會觸發。test_build, manual deploy(在測試機)
  develop_build_manual_deploy:
    jobs:
      - build:
          filters:
            branches:
              only: develop
      - docker_build:
          requires:
            - build
          filters:
            branches:
              only: develop
      - hold:
          type: approval
          requires:
           - docker_build
      - dev_deploy:
          requires:
            - hold
          filters:
            branches:
              only: develop
  
  # push tag: tag-xxxxx 會觸發。
  tag_build_manual_deploy:
    jobs:
      - build:
          filters:
            tags:
              only: /^tag-.*/
            branches:
              ignore: /.*/
      - docker_build:
          requires:
            - build
          filters:
            tags:
              only: /^tag-.*/
            branches:
              ignore: /.*/
      - hold:
          type: approval
          requires:
           - docker_build
      - dev_deploy:
          requires:
            - hold
          filters:
            tags:
              only: /^tag-.*/
            branches:
              ignore: /.*/